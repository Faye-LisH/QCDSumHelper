(* ::Package:: *)

(* Wolfram Language package *)

(* Author: ShungHong Li *)



Fourquarkmqq::usage="Fourquarkmqq[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{v3_,v4_,{a2_,b2_,c2_,d2_}}] give the \[LeftAngleBracket]m\!\(\*OverscriptBox[\(q\), \(_\)]\)q\[RightAngleBracket] contribution of OPE result about <J1 J2>, with J1=\!\(\*SubscriptBox[OverscriptBox[\(\[CapitalPsi]\), \(_\)], \(a1\)]\)\!\(\*SubscriptBox[\(v1\[CapitalPsi]\), \(b1\)]\)\!\(\*SubscriptBox[OverscriptBox[\(\[CapitalPsi]\), \(_\)], \(c1\)]\)\!\(\*SubscriptBox[\(v2\[CapitalPsi]\), \(d1\)]\) and J2=\!\(\*SubscriptBox[OverscriptBox[\(\[CapitalPsi]\), \(_\)], \(b2\)]\)\!\(\*SubscriptBox[\(v3\[CapitalPsi]\), \(a2\)]\)\!\(\*SubscriptBox[OverscriptBox[\(\[CapitalPsi]\), \(_\)], \(d2\)]\)\!\(\*SubscriptBox[\(v4\[CapitalPsi]\), \(c2\)]\) "

Fourquarkmqq::inderr="Dummy indices conflict!"

Begin["`Private`Fourquarkmqq`"]



Options[Fourquarkmqq]={
	Parallelized->False,
	AutoNDR->True,
	HoldFlavor->False
}



Fourquarkmqq[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{v3_,v4_,{a2_,b2_,c2_,d2_}},OptionsPattern[]]:=Block[{null,tmp,tmp1,tmp2,hv3,hv4,atr,holdf=OptionValue[HoldFlavor],diagrams,fdir,files,pall,dot},


(*--- check dummy indices in input ---*)
If[DummyCheck[v1,v2,v3,v4]==0,
	Message[Fourquarkmqq::inderr];
	Abort[]
];




If[OptionValue[AutoNDR]===True,
	atr=TR5
	,
	atr=TR
];



(* B A^+ B *)
hv3=v3//ComplexConjugate;
hv4=v4//ComplexConjugate//FCI;
(* ComplexConjugate[sigma] will expand the DiracSigma to gamma matrices, recover it to DiracSigma *)
hv4=(hv4/.Dot->dot)/.f1_ dot[aa___,DiracGamma[LorentzIndex[lor1_,dim___],dim___],DiracGamma[LorentzIndex[lor2_,dim___],dim___],bb___] + f2_ dot[aa___,DiracGamma[LorentzIndex[lor2_,dim___],dim___],DiracGamma[LorentzIndex[lor1_,dim___],dim___],bb___]/;(f1+f2===0):>-2I f1 dot[aa,DiracSigma[DiracGamma[LorentzIndex[lor1,dim],dim],DiracGamma[LorentzIndex[lor2,dim],dim]],bb];
hv4=hv4/.{null->1,dot->Dot};

(*--------------------------------------------*)		

					
If[DirectoryQ[OptionValue[Parallelized]//ToString],
	fdir=OptionValue[Parallelized];
	pall="External"
,
	fdir="None";
	pall=OptionValue[Parallelized]
];



diagrams={xtype1,xtype2,xtype3,xtype4}(*{type1,type2}*);

(*---------------------------------------------------*)
If[pall===True,

	DistributeDefinitions[qq,v1,v2,a1,b1,c1,d1,a2,b2,c2,d2];
	
	tmp=Plus@@WaitAll[ParallelSubmit[{hv3,hv4,holdf,atr},#[qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr]]&/@diagrams];
	QGather[(tmp/.{CA->SUNN,CF->(SUNN^2 - 1)/(2SUNN)})//Expand//SUNSimplify,qq,ShowasTable->False]/.CA-2CF->1/CA
	
,

	If[pall==="External",
	
		DistributeDefinitions[qq,v1,v2,a1,b1,c1,d1,a2,b2,c2,d2];
		
		If[fdir==="None",
		
			ParallelSubmit[{hv3,hv4,holdf,atr},#[qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr]]&/@diagrams
		,
		
			files=(StringSplit[ToString[#],"`"][[-1]])&/@diagrams;
			files=("Fourquarkmqq_"<>#)&/@files;
			
			ImExport[fdir,
						files,
						{{hv3,hv4,holdf,atr},
						{qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr},
						diagrams}
						]
		](* !!! do not touch tmp before WaitAll[tmp], any function may modifiy the things in EvaluationObject[...] should not be used here. !!! *)
		
		,
		

		
		tmp=#[qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr]&/@diagrams(*(type1[qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr]+type2[qq,{v1,v2,{a1,b1,c1,d1}},{hv3,hv4,{a2,b2,c2,d2}},holdf,atr])*);
		QGather[((Plus@@tmp)/.{CA->SUNN,CF->(SUNN^2 - 1)/(2SUNN)})//Expand//SUNSimplify,qq,ShowasTable->False]/.CA-2CF->1/CA
	]
]


]



(*--- Condensate Symbols ---*)
cqq[a_,b_]:=Condensate[{a,b}]
(*cqgq[a_,b_]:=Condensate[{a,"G",b}]*)


(*------------------------------------------------------------------*)
(* propagators *)

(*prop[q_]=I GSD[q]FAD[q];
prop[q_,a_]=I (GSD[q] + quarkMass[a])FAD[q];
*)
(*xprop[x_]=FourierPX[prop[q],{q,x}];*)
xprop[x_]= 1/2 I^(1-D) \[Pi]^(-D/2) DiracGamma[Momentum[x,D],D] Pair[Momentum[x,D],Momentum[x,D]]^(-D/2) qGamma[D/2];

(*xprop[x_,a_]=FourierPX[prop[q,a],{q,x}];*)
xprop[x_,a_]= (Pair[Momentum[x,D],Momentum[x,D]]^(1-D/2) quarkMass[a]qfact1[1/4 I^(2-D) \[Pi]^(-D/2) qGamma[-1+D/2]] 
			+ DiracGamma[Momentum[x,D],D] Pair[Momentum[x,D],Momentum[x,D]]^(-D/2) qfact1[1/2 I^(1-D) \[Pi]^(-D/2) qGamma[D/2]]);


cqqm[x_,f_]=-1/4*1/CA + ((I/4)*DiracGamma[Momentum[x, D], D]*quarkMass[f])/(CA*D);

(*-----------------------------------*)
(* propagators and condensates *)

xpropm[x_,f_]=(DiracGamma[Momentum[x, D], D]*qfact1[(I^(1 - D)*qGamma[D/2])/(2*Pi^(D/2))])/Pair[Momentum[x, D], Momentum[x, D]]^(D/2) + 
 Pair[Momentum[x, D], Momentum[x, D]]^(1 - D/2)*qfact1[(I^(2 - D)*qGamma[-1 + D/2]*quarkMass[f])/(4*Pi^(D/2))];


(*-------------The following are generated by algorithem----------------*)


(* ::Input::Initialization:: *)
xtype1[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{hv3_,hv4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{x,q,dia1,cc,tr,str,dot,sunSimplify,contract,null},


 dia1=-(Condensate[{a1, a2}]*contract[tr[str[dot[hv3, cqqm[-x, a2], v1, xpropm[x, b1], hv4, xpropm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, d2]*FlavorDelta[c2, c1]*FlavorDelta[d1, b2]) - Condensate[{b2, d1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, xpropm[x, b1], hv4, xpropm[-x, c2], v2, cqqm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, d2]*FlavorDelta[c2, c1]*FlavorDelta[d1, b2] - Condensate[{a1, c2}]*contract[tr[str[dot[hv4, cqqm[-x, c2], v1, xpropm[x, b1], hv3, xpropm[-x, a2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, b2]*FlavorDelta[c2, a1]*FlavorDelta[d1, d2] + Condensate[{d2, d1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, xpropm[x, b1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v2, cqqm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, b2]*FlavorDelta[c2, c1]*FlavorDelta[d1, d2];


 dia1=dia1/.{FlavorDelta[fa_,fb_,___]:>FlavorDelta[fa,fb,HoldFlavor->holdf],dot[aa___,1,bb___]:>dot[aa,bb]}/.dot->Dot/.str->SUNTrace/.{tr->atr,contract->Contract}/.sunSimplify->SUNSimplify;


 dia1=dia1/.Power[_quarkMass,_]->0/. _ quarkMass[f1_] quarkMass[f2_]->0;


 dia1=FourierXP[dia1,{x,q}];


 dia1=QEvaluate[I ScaleMu^(2(4-D)) dia1,q,HoldFlavor->holdf,Parallelized->False]/.CA-2CF->1/CA/.{-1+CA^2-2CA CF->0,1-CA^2+2CA CF->0}/.CF->(CA^2-1)/(2CA);


 dia1=QGather[Expand[dia1]/.Power[_quarkMass,_]->0/. quarkMass[f1_] quarkMass[f2_]->0,q,ShowasTable->False]/.q->qq


]


(* ::Input::Initialization:: *)
xtype2[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{hv3_,hv4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{x,q,dia2,cc,tr,str,dot,sunSimplify,contract,null},


 dia2=Condensate[{b2, d1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v2, cqqm[x, d1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v1, xpropm[x, b1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, d2]*FlavorDelta[c2, a1]*FlavorDelta[d1, b2] - Condensate[{b2, b1}]*contract[tr[str[dot[hv4, xpropm[-x, c2], v1, cqqm[x, b1], hv3, xpropm[-x, a2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, b2]*FlavorDelta[c2, a1]*FlavorDelta[d1, d2] - Condensate[{d2, d1}]*contract[tr[str[dot[hv4, xpropm[-x, c2], v1, xpropm[x, b1], hv3, xpropm[-x, a2], v2, cqqm[x, d1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, b2]*FlavorDelta[c2, a1]*FlavorDelta[d1, d2] + Condensate[{c1, c2}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, xpropm[x, b1]]]]*tr[str[dot[hv4, cqqm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, b2]*FlavorDelta[c2, c1]*FlavorDelta[d1, d2];


 dia2=dia2/.{FlavorDelta[fa_,fb_,___]:>FlavorDelta[fa,fb,HoldFlavor->holdf],dot[aa___,1,bb___]:>dot[aa,bb]}/.dot->Dot/.str->SUNTrace/.{tr->atr,contract->Contract}/.sunSimplify->SUNSimplify;


 dia2=dia2/.Power[_quarkMass,_]->0/. _ quarkMass[f1_] quarkMass[f2_]->0;


 dia2=FourierXP[dia2,{x,q}];


 dia2=QEvaluate[I ScaleMu^(2(4-D)) dia2,q,HoldFlavor->holdf,Parallelized->False]/.CA-2CF->1/CA/.{-1+CA^2-2CA CF->0,1-CA^2+2CA CF->0}/.CF->(CA^2-1)/(2CA);


 dia2=QGather[Expand[dia2]/.Power[_quarkMass,_]->0/. quarkMass[f1_] quarkMass[f2_]->0,q,ShowasTable->False]/.q->qq


]


(* ::Input::Initialization:: *)
xtype3[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{hv3_,hv4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{x,q,dia3,cc,tr,str,dot,sunSimplify,contract,null},


 dia3=Condensate[{a1, c2}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v2, xpropm[x, d1]]]]*tr[str[dot[hv4, cqqm[-x, c2], v1, xpropm[x, b1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, d2]*FlavorDelta[c2, a1]*FlavorDelta[d1, b2] - Condensate[{d2, b1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, cqqm[x, b1], hv4, xpropm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, d2]*FlavorDelta[c2, c1]*FlavorDelta[d1, b2] - Condensate[{c1, a2}]*contract[tr[str[dot[hv4, xpropm[-x, c2], v1, xpropm[x, b1], hv3, cqqm[-x, a2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, b2]*FlavorDelta[c2, a1]*FlavorDelta[d1, d2] + Condensate[{a1, a2}]*contract[tr[str[dot[hv3, cqqm[-x, a2], v1, xpropm[x, b1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, b2]*FlavorDelta[c2, c1]*FlavorDelta[d1, d2];


 dia3=dia3/.{FlavorDelta[fa_,fb_,___]:>FlavorDelta[fa,fb,HoldFlavor->holdf],dot[aa___,1,bb___]:>dot[aa,bb]}/.dot->Dot/.str->SUNTrace/.{tr->atr,contract->Contract}/.sunSimplify->SUNSimplify;


 dia3=dia3/.Power[_quarkMass,_]->0/. _ quarkMass[f1_] quarkMass[f2_]->0;


 dia3=FourierXP[dia3,{x,q}];


 dia3=QEvaluate[I ScaleMu^(2(4-D)) dia3,q,HoldFlavor->holdf,Parallelized->False]/.CA-2CF->1/CA/.{-1+CA^2-2CA CF->0,1-CA^2+2CA CF->0}/.CF->(CA^2-1)/(2CA);


 dia3=QGather[Expand[dia3]/.Power[_quarkMass,_]->0/. quarkMass[f1_] quarkMass[f2_]->0,q,ShowasTable->False]/.q->qq


]


(* ::Input::Initialization:: *)
xtype4[qq_,{v1_,v2_,{a1_,b1_,c1_,d1_}},{hv3_,hv4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{x,q,dia4,cc,tr,str,dot,sunSimplify,contract,null},


 dia4=Condensate[{d2, b1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v2, xpropm[x, d1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v1, cqqm[x, b1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, d2]*FlavorDelta[c2, a1]*FlavorDelta[d1, b2] + Condensate[{c1, a2}]*contract[tr[str[dot[hv3, cqqm[-x, a2], v2, xpropm[x, d1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v1, xpropm[x, b1]]]]]*FlavorDelta[a2, c1]*FlavorDelta[b1, d2]*FlavorDelta[c2, a1]*FlavorDelta[d1, b2] - Condensate[{c1, c2}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, xpropm[x, b1], hv4, cqqm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, d2]*FlavorDelta[c2, c1]*FlavorDelta[d1, b2] + Condensate[{b2, b1}]*contract[tr[str[dot[hv3, xpropm[-x, a2], v1, cqqm[x, b1]]]]*tr[str[dot[hv4, xpropm[-x, c2], v2, xpropm[x, d1]]]]]*FlavorDelta[a2, a1]*FlavorDelta[b1, b2]*FlavorDelta[c2, c1]*FlavorDelta[d1, d2];


 dia4=dia4/.{FlavorDelta[fa_,fb_,___]:>FlavorDelta[fa,fb,HoldFlavor->holdf],dot[aa___,1,bb___]:>dot[aa,bb]}/.dot->Dot/.str->SUNTrace/.{tr->atr,contract->Contract}/.sunSimplify->SUNSimplify;


 dia4=dia4/.Power[_quarkMass,_]->0/. _ quarkMass[f1_] quarkMass[f2_]->0;


 dia4=FourierXP[dia4,{x,q}];


 dia4=QEvaluate[I ScaleMu^(2(4-D)) dia4,q,HoldFlavor->holdf,Parallelized->False]/.CA-2CF->1/CA/.{-1+CA^2-2CA CF->0,1-CA^2+2CA CF->0}/.CF->(CA^2-1)/(2CA);


 dia4=QGather[Expand[dia4]/.Power[_quarkMass,_]->0/. quarkMass[f1_] quarkMass[f2_]->0,q,ShowasTable->False]/.q->qq


]


(*(*-------------------------------------------------*)
(*-------------------------------------------------*)
(* type_1 *)
type1[qq_,{g1_,g2_,{a1_,b1_,c1_,d1_}},{g3_,g4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{tmp,x,q,lora,lorb,cola,colb,k1,k2,k3,l,trb11,trb12,trb13,trb14,dib1},


trb11=(FlavorDelta[b1,b2]FlavorDelta[a2,a1]FlavorDelta[d1,d2]FlavorDelta[c2,c1]cqq[b1,b2]atr[SUNTrace[g1 . (-1/(4CA)+I/(4D CA)quarkMass[b1]GSD[x]) . g3 . xprop[-x,a1]]]atr[SUNTrace[g2 . xprop[x,d1] . g4 . xprop[-x,c1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,a1]FlavorDelta[d1,b2]FlavorDelta[a2,c1]cqq[b1,d2]atr[SUNTrace[g1 . (-1/(4CA)+I/(4D CA)quarkMass[b1]GSD[x]) . g4 . xprop[-x,a1]]]atr[SUNTrace[g2 . xprop[x,d1] . g3 . xprop[-x,c1]]]);

trb12=(FlavorDelta[b1,b2]FlavorDelta[a2,a1]FlavorDelta[d1,d2]FlavorDelta[c2,c1]cqq[a1,a2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . (-1/(4CA)+I/(4D CA)quarkMass[a1]GSD[-x])]]atr[SUNTrace[g2 . xprop[x,d1] . g4 . xprop[-x,c1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,a1]FlavorDelta[d1,b2]FlavorDelta[a2,c1]cqq[a1,c2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . (-1/(4CA)+I/(4D CA)quarkMass[a1]GSD[-x])]]atr[SUNTrace[g2 . xprop[x,d1] . g3 . xprop[-x,c1]]]);

trb13=(FlavorDelta[b1,b2]FlavorDelta[a2,a1]FlavorDelta[d1,d2]FlavorDelta[c2,c1]cqq[d1,d2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . xprop[-x,a1]]]atr[SUNTrace[g2 . (-1/(4CA)+I/(4D CA)quarkMass[d1]GSD[x]) . g4 . xprop[-x,c1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,a1]FlavorDelta[d1,b2]FlavorDelta[a2,c1]cqq[d1,b2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . xprop[-x,a1]]]atr[SUNTrace[g2 . (-1/(4CA)+I/(4D CA)quarkMass[d1]GSD[x]) . g3 . xprop[-x,c1]]]);

trb14=(FlavorDelta[b1,b2]FlavorDelta[a2,a1]FlavorDelta[d1,d2]FlavorDelta[c2,c1]cqq[c1,c2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . xprop[-x,a1]]]atr[SUNTrace[g2 . xprop[x,d1] . g4 . (-1/(4CA)+I/(4D CA)quarkMass[c1]GSD[-x])]]+FlavorDelta[b1,d2]FlavorDelta[c2,a1]FlavorDelta[d1,b2]FlavorDelta[a2,c1]cqq[c1,a2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . xprop[-x,a1]]]atr[SUNTrace[g2 . xprop[x,d1] . g3 . (-1/(4CA)+I/(4D CA)quarkMass[c1]GSD[-x])]]);



(*
trb11=cqq[b1,b1](If[({a1,b1}==={a2,b2})&&({c1,d1}==={c2,d2}),atr[SUNTrace[g1.(-1/(4CA)+I/(4 D CA) M[b1] GSD[x]).g3.xprop[-x,M[a1]]]]atr[SUNTrace[g2.xprop[x,M[d1]].g4.xprop[-x,M[c1]]]],0]
+(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[({a1,b1}==={c2,d2})&&({c1,d1}==={a2,b2}),atr[SUNTrace[g1.(-1/(4CA)+I/(4 D CA) M[b1] GSD[x]).g4.xprop[-x,M[a1]]]]atr[SUNTrace[g2.xprop[x,M[d1]].g3.xprop[-x,M[c1]]]],0]);


trb12=cqq[a1,a1](If[({a1,b1}==={a2,b2})&&({c1,d1}==={c2,d2}),atr[SUNTrace[g1.xprop[x,M[b1]].g3.(-1/(4CA)+I/(4 D CA) M[a1] GSD[-x])]]atr[SUNTrace[g2.xprop[x,M[d1]].g4.xprop[-x,M[c1]]]],0]
+(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[({a1,b1}==={c2,d2})&&({c1,d1}==={a2,b2}),atr[SUNTrace[g1.xprop[x,M[b1]].g4.(-1/(4CA)+I/(4 D CA) M[a1] GSD[-x])]]atr[SUNTrace[g2.xprop[x,M[d1]].g3.xprop[-x,M[c1]]]],0]);


trb13=cqq[d1,d1](If[({a1,b1}==={a2,b2})&&({c1,d1}==={c2,d2}),atr[SUNTrace[g1.xprop[x,M[b1]].g3.xprop[-x,M[a1]]]]atr[SUNTrace[g2.(-1/(4CA)+I/(4 D CA) M[d1] GSD[x]).g4.xprop[-x,M[c1]]]],0]
+(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[({a1,b1}==={c2,d2})&&({c1,d1}==={a2,b2}),atr[SUNTrace[g1.xprop[x,M[b1]].g4.xprop[-x,M[a1]]]]atr[SUNTrace[g2.(-1/(4CA)+I/(4 D CA) M[d1] GSD[x]).g3.xprop[-x,M[c1]]]],0]);


trb14=cqq[c1,c1](If[({a1,b1}==={a2,b2})&&({c1,d1}==={c2,d2}),atr[SUNTrace[g1.xprop[x,M[b1]].g3.xprop[-x,M[a1]]]]atr[SUNTrace[g2.xprop[x,M[d1]].g4.(-1/(4CA)+I/(4 D CA) M[c1] GSD[-x])]],0]
+(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[({a1,b1}==={c2,d2})&&({c1,d1}==={a2,b2}),atr[SUNTrace[g1.xprop[x,M[b1]].g4.xprop[-x,M[a1]]]]atr[SUNTrace[g2.xprop[x,M[d1]].g3.(-1/(4CA)+I/(4 D CA) M[c1] GSD[-x])]],0]);
*)


(*-----------------------------*)
dib1=FourierXP[trb11+trb12+trb13+trb14,{x,q}]/.{SUNN->CA,CF->(CA^2-1)/(2CA)};

(*Print[dib1,"---",trb11,"---",trb12,"---",trb13,"---",trb14];*)

tmp=QEvaluate[I ScaleMu^(2(4-D))dib1 ,q,Parallelized->False,HoldFlavor->holdf];

(* keep the terms ~ quarkMass *)
tmp=QGather[Expand[tmp]/.{quarkMass[aa_]quarkMass[bb_]->0,Power[quarkMass[_],_]->0},q,ShowasTable->False]/.q->qq

]
(*-------------------------------------------------*)
(*-------------------------------------------------*)*)


(*(*-------------------------------------------------*)
(*-------------------------------------------------*)
(* type_2 *)
type2[qq_,{g1_,g2_,{a1_,b1_,c1_,d1_}},{g3_,g4_,{a2_,b2_,c2_,d2_}},holdf_,atr_]:=Block[{tmp,x,q,lora,lorb,cola,colb,k1,k2,k3,l,trb21,trb22,trb23,trb24,dib2},



trb21=(FlavorDelta[b1,b2]FlavorDelta[a2,c1]FlavorDelta[d1,d2]FlavorDelta[c2,a1]cqq[b1,b2]atr[SUNTrace[g1 . (-1/(4CA)+I/(4D CA)quarkMass[b1]GSD[x]) . g3 . xprop[-x,c1] . g2 . xprop[x,d1] . g4 . xprop[-x,a1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,c1]FlavorDelta[d1,b2]FlavorDelta[a2,a1]cqq[b1,d2]atr[SUNTrace[g1 . (-1/(4CA)+I/(4D CA)quarkMass[b1]GSD[x]) . g4 . xprop[-x,c1] . g2 . xprop[x,d1] . g3 . xprop[-x,a1]]]);

trb22=(FlavorDelta[b1,b2]FlavorDelta[a2,c1]FlavorDelta[d1,d2]FlavorDelta[c2,a1]cqq[a1,c2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . xprop[-x,c1] . g2 . xprop[x,d1] . g4 . (-1/(4CA)+I/(4D CA)quarkMass[a1]GSD[-x])]]+FlavorDelta[b1,d2]FlavorDelta[c2,c1]FlavorDelta[d1,b2]FlavorDelta[a2,a1]cqq[a1,a2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . xprop[-x,c1] . g2 . xprop[x,d1] . g3 . (-1/(4CA)+I/(4D CA)quarkMass[a1]GSD[-x])]]);

trb23=(FlavorDelta[b1,b2]FlavorDelta[a2,c1]FlavorDelta[d1,d2]FlavorDelta[c2,a1]cqq[c1,a2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . (-1/(4CA)+I/(4D CA)quarkMass[c1]GSD[-x]) . g2 . xprop[x,d1] . g4 . xprop[-x,a1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,c1]FlavorDelta[d1,b2]FlavorDelta[a2,a1]cqq[c1,c2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . (-1/(4CA)+I/(4D CA)quarkMass[c1]GSD[-x]) . g2 . xprop[x,d1] . g3 . xprop[-x,a1]]]);

trb24=(FlavorDelta[b1,b2]FlavorDelta[a2,c1]FlavorDelta[d1,d2]FlavorDelta[c2,a1]cqq[d1,d2]atr[SUNTrace[g1 . xprop[x,b1] . g3 . xprop[-x,c1] . g2 . (-1/(4CA)+I/(4D CA)quarkMass[d1]GSD[x]) . g4 . xprop[-x,a1]]]+FlavorDelta[b1,d2]FlavorDelta[c2,c1]FlavorDelta[d1,b2]FlavorDelta[a2,a1]cqq[d1,b2]atr[SUNTrace[g1 . xprop[x,b1] . g4 . xprop[-x,c1] . g2 . (-1/(4CA)+I/(4D CA)quarkMass[d1]GSD[x]) . g3 . xprop[-x,a1]]]);


(*
trb21=cqq[b1,b1](If[(b1===b2)&&(a2===c1)&&(d1===d2)&&(c2===a1),atr[SUNTrace[g1.(-1/(4CA)+I/(4 D CA) M[b1] GSD[x]).g3.xprop[-x,M[c1]].g2.xprop[x,M[d1]].g4.xprop[-x,M[a1]]]],0]
+
(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[(b1===d2)&&(c2===c1)&&(d1===b2)&&(a2===a1),atr[SUNTrace[g1.(-1/(4CA)+I/(4 D CA) M[b1] GSD[x]).g4.xprop[-x,M[c1]].g2.xprop[x,M[d1]].g3.xprop[-x,M[a1]]]],0]
);


trb22=cqq[a1,a1](If[(b1===b2)&&(a2===c1)&&(d1===d2)&&(c2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g3.xprop[-x,M[c1]].g2.xprop[x,M[d1]].g4.(-1/(4CA)+I/(4 D CA) M[a1] GSD[-x])]],0]
+
(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[(b1===d2)&&(c2===c1)&&(d1===b2)&&(a2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g4.xprop[-x,M[c1]].g2.xprop[x,M[d1]].g3.(-1/(4CA)+I/(4 D CA) M[a1] GSD[-x])]],0]
);


trb23=cqq[c1,c1](If[(b1===b2)&&(a2===c1)&&(d1===d2)&&(c2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g3.(-1/(4CA)+I/(4 D CA) M[c1] GSD[-x]).g2.xprop[x,M[d1]].g4.xprop[-x,M[a1]]]],0]
+
(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[(b1===d2)&&(c2===c1)&&(d1===b2)&&(a2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g4.(-1/(4CA)+I/(4 D CA) M[c1] GSD[-x]).g2.xprop[x,M[d1]].g3.xprop[-x,M[a1]]]],0]
);


trb24=cqq[d1,d1](If[(b1===b2)&&(a2===c1)&&(d1===d2)&&(c2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g3.xprop[-x,M[c1]].g2.(-1/(4CA)+I/(4 D CA) M[d1] GSD[x]).g4.xprop[-x,M[a1]]]],0]
+
(* Subscript[\[CapitalGamma], 3]\[TwoWayRule]Subscript[\[CapitalGamma], 4] *)
If[(b1===d2)&&(c2===c1)&&(d1===b2)&&(a2===a1),atr[SUNTrace[g1.xprop[x,M[b1]].g4.xprop[-x,M[c1]].g2.(-1/(4CA)+I/(4 D CA) M[d1] GSD[x]).g3.xprop[-x,M[a1]]]],0]
);
*)



(*-----------------------------*)

dib2=FourierXP[trb21+trb22+trb23+trb24,{x,q}]/.{SUNN->CA,CF->(CA^2-1)/(2CA)};


(*Print[dib2,"---",trb21,"---",trb22,"---",trb23,"---",trb24];*)

tmp=QEvaluate[-I ScaleMu^(2(4-D))dib2,q,Parallelized->False,HoldFlavor->holdf];(* -1 for fermion loop *)

(* keep the terms ~ quarkMass *)
tmp=QGather[Expand[tmp]/.{quarkMass[aa_]quarkMass[bb_]->0,Power[quarkMass[_],_]->0},q,ShowasTable->False]/.q->qq



]
(*-------------------------------------------------*)
(*-------------------------------------------------*)*)


End[]
(*EndPackage[]*)
